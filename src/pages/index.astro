---
import BaseHead from '../components/BaseHead.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { slugify } from '../utils/slugify';
import reading from '../../reading.json';


import { parseStringPromise } from 'xml2js';

const rssUrl = 'https://obodugo.substack.com/feed'; // Your Substack RSS feed

const response = await fetch(rssUrl);
const xml = await response.text();
const json = await parseStringPromise(xml);

const posts = json.rss.channel[0].item.slice(0, 5).map((item) => ({
  title: item.title[0],
  link: item.link[0],
  date: item.pubDate[0],
  slug: slugify(item.title[0]),
  description: item.description ? item.description[0] : '',
}));

// Format date simply
const formatDate = (dateStr) => {
  const date = new Date(dateStr);
  return date.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long' 
  }).toLowerCase();
};
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>

		</style>
	</head>
	<body>
		<div class="header">
			<h1 onclick="nameClick()">obodugo</h1>
			<div class="subtitle" onclick="cycleTitle()">builder</div>
			<div class="bio" onclick="cycleBio()">
				i turn questions into products. everything else is noise.
			</div>
		</div>

		<nav class="nav">
			<a href="https://gistpool.com">gistpool</a>
			<a href="https://mysub.io">mysub</a>
			<a href="https://aristoman.com">aristoman</a>
			<a href="/blog">writing</a>
			<a href="mailto:raph@gistpool.com">email</a>
		</nav>

		<div class="reading-section">
			<div class="reading-header">
				<h3 class="reading-title" onclick="cycleReadingTitle()">currently reading</h3>
				<span class="reading-status" onclick="cycleStatus()">{reading.complete} complete</span>
			</div>
			
			<div class="book-container" onclick="bookClick()">
				<div class="bookmark"></div>
				
				<div class="book-info">
					<div class="book-cover" onclick="flipCover(event)"></div>
					
					<div class="book-details">
						<div class="book-title" onclick="cycleBookTitle(event)">{reading.title}</div>
						<div class="book-author" onclick="cycleAuthor(event)">{reading.author}</div>
						<div class="reading-note" onclick="cycleNote(event)">"{reading.note}"</div>		
					</div>
				</div>
				
				<div class="last-read" onclick="cycleLastRead(event)">yesterday</div>
			</div>
		</div>

		<div class="section">
			<h2 class="section-title" onclick="cycleSectionTitle()">recent writing</h2>
			<ul class="blog-list">
				{posts.map((post) => (
					<li class="blog-item">
						<a href={`/blog/${post.slug}/`} class="blog-link">
							<div class="blog-title">{post.title}</div>
							<div class="blog-date">{formatDate(post.date)}</div>
						</a>
					</li>
				))}
			</ul>
		</div>

		<div class="footer" onclick="revealSecret()">
			built with html and css
		</div>

		<script>
			// Existing code
			const titles = ['builder', 'maker', 'creator', 'procrastinator', 'caffeine converter', 'digital nomad wannabe', 'startup survivor'];
			let currentIndex = 0;
			
			function cycleTitle() {
				currentIndex = (currentIndex + 1) % titles.length;
				document.querySelector('.subtitle').textContent = titles[currentIndex];
			}
			
			let clickCount = 0;
			function revealSecret() {
				clickCount++;
				const footer = document.querySelector('.footer');
				
				if (clickCount === 1) {
					footer.textContent = 'built with blood, sweat, and stackoverflow';
				} else if (clickCount === 2) {
					footer.textContent = 'actually just astro and substack rss (and 47 cups of coffee)';
				} else if (clickCount === 3) {
					footer.textContent = 'ok fine, i used chatgpt for the animations';
				} else if (clickCount === 4) {
					footer.textContent = 'stop clicking me';
				} else {
					footer.textContent = 'seriously, there are no more easter eggs';
					clickCount = 0;
				}
			}

			// New easter eggs
			const bios = [
				'i turn questions into products. everything else is noise.',
				'i write code and pretend it\'s art. three failed startups and counting. optimistically pessimistic.',
				'professional yak shaver. expert in reinventing wheels. ask me about my 47 unfinished side projects.',
				'turning coffee into questionable business decisions since 2019. still figuring it out.',
				'building things nobody asked for but hopefully someone needs. chronic overthinker.'
			];
			let bioIndex = 0;
			
			function cycleBio() {
				bioIndex = (bioIndex + 1) % bios.length;
				document.querySelector('.bio').innerHTML = bios[bioIndex];
			}

			const sectionTitles = ['recent writing', 'stuff i wrote', 'brain dumps', 'thoughts & regrets', 'digital diary'];
			let sectionIndex = 0;
			
			function cycleSectionTitle() {
				sectionIndex = (sectionIndex + 1) % sectionTitles.length;
				document.querySelector('.section-title').textContent = sectionTitles[sectionIndex];
			}

			let nameClicks = 0;
			function nameClick() {
				nameClicks++;
				const name = document.querySelector('h1');
				
				if (nameClicks === 5) {
					name.textContent = 'obodugo "definitely not an ai" rapheal';
				} else if (nameClicks === 10) {
					name.textContent = '0b0dug0';
					name.style.fontFamily = 'Comic Sans MS, cursive';
				} else if (nameClicks === 15) {
					name.textContent = 'obodugo rapheal (my full name)';
					name.style.fontFamily = '';
				} else if (nameClicks === 20) {
					name.textContent = 'obodugo';
					document.body.classList.add('secret-mode');
					setTimeout(() => document.body.classList.remove('secret-mode'), 3000);
					nameClicks = 0;
				}
			}

			// Konami code easter egg
			const konamiCode = [
				'ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown',
				'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight',
				'KeyB', 'KeyA'
			];
			let konamiIndex = 0;
			
			document.addEventListener('keydown', function(e) {
				if (e.code === konamiCode[konamiIndex]) {
					konamiIndex++;
					if (konamiIndex === konamiCode.length) {
						document.body.classList.add('konami-mode');
						document.querySelector('h1').textContent = '🕹️ achievement unlocked: konami master';
						setTimeout(() => {
							document.querySelector('h1').textContent = 'obodugo';
							document.body.classList.remove('konami-mode');
						}, 2000);
						konamiIndex = 0;
					}
				} else {
					konamiIndex = 0;
				}
			});

			// Secret typing easter egg
			let secretBuffer = '';
			document.addEventListener('keypress', function(e) {
				secretBuffer += e.key;
				if (secretBuffer.length > 10) {
					secretBuffer = secretBuffer.slice(-10);
				}
				
				if (secretBuffer.includes('hello')) {
					document.querySelector('.bio').innerHTML = '👋 oh hey there! you found the secret. i see you.';
					secretBuffer = '';
				}
				
				if (secretBuffer.includes('coffee')) {
					document.querySelector('h1').textContent = '☕ obodugo "caffeinated" rapheal';
					setTimeout(() => document.querySelector('h1').textContent = 'obodugo', 3000);
					secretBuffer = '';
				}
			});

			// Time-based easter egg
			const hour = new Date().getHours();
			if (hour < 6 || hour > 22) {
				document.querySelector('.subtitle').textContent = 'insomniac';
			}

			// Reading section interactions
			const readingTitles = ['currently reading', 'obsessing over', 'slowly digesting', 'pretending to read', 'actually enjoying'];
			let readingTitleIndex = 0;
			
			function cycleReadingTitle() {
				readingTitleIndex = (readingTitleIndex + 1) % readingTitles.length;
				document.querySelector('.reading-title').textContent = readingTitles[readingTitleIndex];
			}

			const statuses = ['34% complete', 'making progress', 'stuck on chapter 4', 'procrastinating', 'mind blown'];
			let statusIndex = 0;
			
			function cycleStatus() {
				statusIndex = (statusIndex + 1) % statuses.length;
				document.querySelector('.reading-status').textContent = statuses[statusIndex];
			}

			const bookTitles = ['The Design of Everyday Things', 'How to Make Doors Less Confusing', 'Why Everything is Broken', 'Design for Humans 101'];
			let bookTitleIndex = 0;
			
			function cycleBookTitle(e) {
				e.stopPropagation();
				bookTitleIndex = (bookTitleIndex + 1) % bookTitles.length;
				document.querySelector('.book-title').textContent = bookTitles[bookTitleIndex];
			}

			const authors = ['Donald A. Norman', 'Don Norman', 'The Door Guy', 'UX Legend'];
			let authorIndex = 0;
			
			function cycleAuthor(e) {
				e.stopPropagation();
				authorIndex = (authorIndex + 1) % authors.length;
				document.querySelector('.book-author').textContent = authors[authorIndex];
			}

			const progressTexts = [
				{ left: 'page 156 of 368', right: '2 weeks left' },
				{ left: '42% done', right: 'forever to go' },
				{ left: 'chapter 6 of 12', right: 'getting there' },
				{ left: 'halfway through', right: 'ish' }
			];
			let progressIndex = 0;
			
			function cycleProgressText(e) {
				e.stopPropagation();
				progressIndex = (progressIndex + 1) % progressTexts.length;
				const spans = document.querySelectorAll('.progress-text span');
				spans[0].textContent = progressTexts[progressIndex].left;
				spans[1].textContent = progressTexts[progressIndex].right;
			}

			const notes = [
				'"finally understanding why doors confuse me so much"',
				'"this explains everything wrong with my coffee maker"',
				'"taking notes on every terrible interface"',
				'"now i notice bad design everywhere"',
				'"becoming insufferable about door handles"'
			];
			let noteIndex = 0;
			
			function cycleNote(e) {
				e.stopPropagation();
				noteIndex = (noteIndex + 1) % notes.length;
				document.querySelector('.reading-note').textContent = notes[noteIndex];
			}

			const lastReads = ['yesterday', 'this morning', '3 days ago', 'last week', 'sometime recently'];
			let lastReadIndex = 0;
			
			function cycleLastRead(e) {
				e.stopPropagation();
				lastReadIndex = (lastReadIndex + 1) % lastReads.length;
				document.querySelector('.last-read').textContent = lastReads[lastReadIndex];
			}

			function flipCover(e) {
				e.stopPropagation();
				const cover = document.querySelector('.book-cover');
				cover.classList.add('flipping');
				setTimeout(() => cover.classList.remove('flipping'), 600);
			}

			function updateProgress(e) {
				e.stopPropagation();
				const progressFill = document.querySelector('.progress-fill');
				const rect = e.currentTarget.getBoundingClientRect();
				const x = e.clientX - rect.left;
				const percentage = Math.min(Math.max((x / rect.width) * 100, 5), 95);
				progressFill.style.width = percentage + '%';
			}

			function bookClick() {
				const container = document.querySelector('.book-container');
				container.style.transform = 'scale(0.98)';
				setTimeout(() => {
					container.style.transform = '';
				}, 150);
			}

			// Random gradient for book cover
			const gradients = [
				'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
				'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
				'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',
				'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)',
				'linear-gradient(135deg, #fa709a 0%, #fee140 100%)'
			];
			
			setInterval(() => {
				const cover = document.querySelector('.book-cover');
				if (cover) {
					const randomGradient = gradients[Math.floor(Math.random() * gradients.length)];
					cover.style.background = randomGradient;
				}
			}, 8000);
		</script>
	</body>
</html>