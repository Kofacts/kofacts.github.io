---
// src/layouts/BlogPost.astro
import BaseHead from '../components/BaseHead.astro';

export interface Props {
    title: string;
    date: string;
    link: string;
    content?: string;
    description?: string;
}

const { title, date, link, content, description } = Astro.props;

const ogSlug = title.toLowerCase()
  .replace(/[^a-z0-9]+/g, '-')
  .replace(/^-|-$/g, '');

// Format date simply
const formatDate = (dateStr: string) => {
    try {
        const date = new Date(dateStr);
        if (isNaN(date.getTime())) {
            return 'recently'; // fallback for invalid dates
        }
        return date.toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'long' 
        }).toLowerCase();
    } catch (e) {
        return 'recently';
    }
};

// Simple reading time calculation
const getReadingTime = (content: string) => {
    if (!content) return '2 min read';
    const words = content.replace(/<[^>]*>/g, '').split(/\s+/).length;
    const minutes = Math.ceil(words / 200);
    return `${minutes} min read`;
};
---

<!DOCTYPE html>
<html lang="en">
<head>
    <BaseHead title={`${title} ¬∑ obodugo rapheal`} description={description || title} />

    <style is:global>
        /* Reset everything aggressively */
    </style>
</head>
<body>
    <div class="progress-bar" id="progressBar"></div>
    
    <a href="/blog" class="back" onclick="goBack()">back</a>
    
    <header class="blog-header">
        <h1 onclick="titleClick()">{title}</h1>
        <div class="meta">
            <span class="date" onclick="cycleDate()">{formatDate(date)}</span>
            <span class="author" onclick="cycleAuthor()">obodugo rapheal</span>
            <span class="reading-time" onclick="toggleReadingTime()">{getReadingTime(content || '')}</span>
        </div>
    </header>
    
    <article class="blog-content">
        {content ? (
            <div set:html={content} />
        ) : (
            <p>This is a preview. The full post is available on Substack.</p>
        )}
        
        <a href={link} target="_blank" rel="noopener noreferrer" class="substack-link">
            Read full post on Substack ‚Üí
        </a>
    </article>
    
    <nav class="footer-nav">
        <a href="/blog">‚Üê all posts</a>
        <a href="/">home</a>
        <a href={link} target="_blank">substack ‚Üí</a>
    </nav>
    
    <div class="easter-egg" id="easterEgg" onclick="activateEasterEgg()">
        ü•ö
    </div>

    <script>
        // Reading progress bar
        window.addEventListener('scroll', function() {
            const winScroll = document.body.scrollTop || document.documentElement.scrollTop;
            const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
            const scrolled = (winScroll / height) * 100;
            document.getElementById('progressBar').style.width = scrolled + '%';
            
            // Show easter egg after 50% scroll
            const easterEgg = document.getElementById('easterEgg');
            if (scrolled > 50) {
                easterEgg.classList.add('visible');
            }
        });

        // Store original title for cycling
        const originalTitle = document.querySelector('h1').textContent;
        const titleVariations = [
            originalTitle,
            originalTitle + ' (probably)',
            originalTitle + ' (trust me)',
            'thoughts on ' + originalTitle.toLowerCase(),
            originalTitle + ' (hot take)'
        ];
        let titleIndex = 0;
        
        function titleClick() {
            titleIndex = (titleIndex + 1) % titleVariations.length;
            document.querySelector('h1').textContent = titleVariations[titleIndex];
        }

        // Date cycling
        const originalDate = document.querySelector('.date').textContent;
        const dates = [originalDate, 'a while ago', 'recently', 'when i was procrastinating', 'sometime in the past'];
        let dateIndex = 0;
        
        function cycleDate() {
            dateIndex = (dateIndex + 1) % dates.length;
            document.querySelector('.date').textContent = dates[dateIndex];
        }

        // Author cycling
        const authors = ['obodugo rapheal', 'definitely obodugo', 'not a ghost writer', 'coffee-fueled obodugo', 'obodugo (past tense)'];
        let authorIndex = 0;
        
        function cycleAuthor() {
            authorIndex = (authorIndex + 1) % authors.length;
            document.querySelector('.author').textContent = authors[authorIndex];
        }

        // Reading time cycling
        const originalTime = document.querySelector('.reading-time').textContent;
        const readingTimes = [originalTime, '2 min skim', '30 sec if you skip to the end', 'however long you want', '‚àû if you overthink it'];
        let timeIndex = 0;
        
        function toggleReadingTime() {
            timeIndex = (timeIndex + 1) % readingTimes.length;
            document.querySelector('.reading-time').textContent = readingTimes[timeIndex];
        }

        // Back button enhancement
        function goBack() {
            if (window.history.length > 1) {
                window.history.back();
            } else {
                window.location.href = '/blog';
            }
        }

        // Easter egg
        let easterEggClicks = 0;
        function activateEasterEgg() {
            easterEggClicks++;
            const egg = document.getElementById('easterEgg');
            
            if (easterEggClicks === 1) {
                egg.textContent = 'üê£';
            } else if (easterEggClicks === 2) {
                egg.textContent = 'üê•';
            } else if (easterEggClicks === 3) {
                egg.textContent = 'üêî';
                document.body.classList.add('shake');
                setTimeout(() => document.body.classList.remove('shake'), 500);
            } else if (easterEggClicks === 4) {
                egg.textContent = 'üçó';
            } else {
                egg.textContent = 'üíÄ';
                easterEggClicks = 0;
            }
        }

        // Konami code
        const konamiCode = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'KeyB', 'KeyA'];
        let konamiIndex = 0;
        
        document.addEventListener('keydown', function(e) {
            if (e.code === konamiCode[konamiIndex]) {
                konamiIndex++;
                if (konamiIndex === konamiCode.length) {
                    document.querySelector('h1').textContent = 'üïπÔ∏è you found the secret level!';
                    document.body.style.background = 'linear-gradient(45deg, #ff6b6b, #4ecdc4)';
                    setTimeout(() => {
                        document.querySelector('h1').textContent = titleVariations[titleIndex];
                        document.body.style.background = '#fff';
                    }, 3000);
                    konamiIndex = 0;
                }
            } else {
                konamiIndex = 0;
            }
        });

        // Secret typing easter eggs
        let secretBuffer = '';
        document.addEventListener('keypress', function(e) {
            secretBuffer += e.key;
            if (secretBuffer.length > 10) {
                secretBuffer = secretBuffer.slice(-10);
            }
            
            if (secretBuffer.includes('substack')) {
                document.querySelector('.author').textContent = 'substack obodugo';
                secretBuffer = '';
            }
            
            if (secretBuffer.includes('builder')) {
                document.querySelector('.reading-time').textContent = 'built while reading';
                secretBuffer = '';
            }
        });
    </script>
</body>
</html>